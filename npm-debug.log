0 info it worked if it ends with ok
1 verbose cli [ '/Users/weiyu.lin/.nvm/versions/node/v0.12.0/bin/node',
1 verbose cli   '/Users/weiyu.lin/.nvm/versions/node/v0.12.0/bin/npm',
1 verbose cli   'publish' ]
2 info using npm@2.5.1
3 info using node@v0.12.0
4 verbose publish [ '.' ]
5 silly cache add args [ '.', null ]
6 verbose cache add spec .
7 silly cache add parsed spec { raw: '.',
7 silly cache add   scope: null,
7 silly cache add   name: null,
7 silly cache add   rawSpec: '.',
7 silly cache add   spec: '/Users/weiyu.lin/FrontEnd/node-async-require-loader',
7 silly cache add   type: 'directory' }
8 verbose addLocalDirectory /Users/weiyu.lin/.npm/node-async-require-loader/1.1.6/package.tgz not in flight; packing
9 verbose tar pack [ '/Users/weiyu.lin/.npm/node-async-require-loader/1.1.6/package.tgz',
9 verbose tar pack   '/Users/weiyu.lin/FrontEnd/node-async-require-loader' ]
10 verbose tarball /Users/weiyu.lin/.npm/node-async-require-loader/1.1.6/package.tgz
11 verbose folder /Users/weiyu.lin/FrontEnd/node-async-require-loader
12 info prepublish node-async-require-loader@1.1.6
13 verbose addLocalTarball adding from inside cache /Users/weiyu.lin/.npm/node-async-require-loader/1.1.6/package.tgz
14 silly cache afterAdd node-async-require-loader@1.1.6
15 verbose afterAdd /Users/weiyu.lin/.npm/node-async-require-loader/1.1.6/package/package.json not in flight; writing
16 verbose afterAdd /Users/weiyu.lin/.npm/node-async-require-loader/1.1.6/package/package.json written
17 silly publish { name: 'node-async-require-loader',
17 silly publish   version: '1.1.6',
17 silly publish   description: 'Transparently require() remote contents (node moudles) in webpack !',
17 silly publish   main: 'index.js',
17 silly publish   scripts: { test: 'npm link node-async-require-loader && mocha test/index.js' },
17 silly publish   repository:
17 silly publish    { type: 'git',
17 silly publish      url: 'git@github.com:jaydenlin/node-async-require-loader.git' },
17 silly publish   keywords: [ 'react-templates', 'node', 'server' ],
17 silly publish   author:
17 silly publish    { name: 'Jayden Lin',
17 silly publish      email: 'jayden.weiyu@gmail.com',
17 silly publish      url: 'http://www.jdlin.com' },
17 silly publish   license: 'ISC',
17 silly publish   bugs: { url: 'https://github.com/jaydenlin/node-async-require-loader/issues' },
17 silly publish   homepage: 'https://github.com/jaydenlin/node-async-require-loader',
17 silly publish   dependencies:
17 silly publish    { fetch: '0.3.6',
17 silly publish      'loader-utils': '0.2.12',
17 silly publish      lodash: '3.10.1',
17 silly publish      mocha: '2.3.4',
17 silly publish      'react-templates': '0.3.2' },
17 silly publish   devDependencies: { react: '0.13.3', shelljs: '0.5.3', webpack: '1.12.9' },
17 silly publish   readme: '# node-async-require-loader\n[![Build Status](https://travis-ci.org/jaydenlin/node-async-require-loader.svg?branch=master)](https://travis-ci.org/jaydenlin/node-async-require-loader)  \n\n> Transparently `require()` remote contents (node moudles) in webpack !\n\n\n```\nnpm install --save node-async-require-loader\n```\n### Concept\nFetch the remote contnets (node module) by http GET and build codes in webpack.   \nI made up the file with `.ajs` extention.\n* Only for the loader to recognize the file.\n* The file contents is only a remote url.\n* webpack will fetch the contents by the remote url to build codes.\n\n### Highlight\n* Provid the `PreParser` config for parsing remote contents before webpack compiles.\n* Privde the `queryString` config for fetching diffrent remote contents.\n* Provide the `PreParser` for [react-templates](http://wix.github.io/react-templates)!\n* How about isomorphic `require()` on server-side ? We got [node-async-require](https://github.com/jaydenlin/node-async-require) for it !  \n\n### Basic Usage\n\nFetch the remote contnets (node module) by http GET and build codes in webpack.  \n`.ajs` extention is only for the loader to recognize the file.  \n\n```\nnpm install --save node-async-require-loader\n```\n\n* Use directly in the js file. (Not recommed)\n```js\nrequire("node-async-require-loader!remote-content.ajs");\n\n```\n\n* Or Set up the webpack.config.js\n```js\n    module: {\n        loaders: [{\n            test: /\\.ajs$/,\n            loader: "node-async-require-loader"\n        }]\n    }\n```\n\n### Example for basic usage\n\n##### Step 1. Provide an .ajs file\n\n`.ajs` extenion is only for the loader to recognize the file.  \nWrite down the remote url that provides contents(node moudle) you want to fetch.  \nThe following is the exmaple of .ajs file.  \n \n`remote-content.ajs`\n```js\nhttps://jaydenlin.github.io/fake-remote-contents-for-test/contents/pure-js/\n``` \n\nthe contnets from the remote url are: \n\n```js\nmodule.export=function(){ console.log("Hello World From Web"); };\n```\nIt\'s a node moudle.\n\n##### Step 2. Set up the webpack.config.js\nWe set up the config so that the loader will load the .ajs file and to fetch the remote node moudle.\n\n```js\n    module: {\n        loaders: [{\n            test: /\\.ajs$/,\n            loader: "node-async-require-loader"\n        }]\n    }\n```\n\n##### Step 3. Done\nThen the webpack will fetch the remote contents and build the codes for you!\nYou can see `examples/example01` in codes for more detials.\n\n### Usage with queryString\n\nIn some cases, the fixed remote url is not good. you may need to add queryString to fetch diffrent remote contents (node moudle).\n\n* Use queryString directly in the js file. (Not recommed)\n```js\nrequire("node-async-require-loader!remote-content.ajs?queryString=\'en\'");\n\n```\n\n* Or Set up the webpack.config.js\n```js\n    module: {\n        loaders: [{\n            test: /\\.ajs$/,\n            loader: "node-async-require-loader?queryString=\'en\'"\n        }]\n    }\n```\n\n## Example for using queryString\n\n###### Step 1. Provide an .ajs file\n\n`.ajs` extenion is only for the loader to recognize the file. \nWrite down the remote url that provides contents(node moudle) you want to fetch.\nThe queryString you set will automatically append to the end of the url. \n\n \n`remote-content.ajs`\n```js\nhttps://jaydenlin.github.io/fake-remote-contents-for-test/contents/pure-js/\n``` \n\nWith the queryString, the actual url we fetch is \n\n```js\n//the queryString `en` is appended\nhttps://jaydenlin.github.io/fake-remote-contents-for-test/contents/pure-js/en/\n```\n\nSo the contents will be the new url\'s contents\n```js\nmodule.export=function(){ console.log("Hello USA From Web"); };\n```\nIt\'s a node moudle.\n\n###### Step 2. Set up the webpack.config.js\nUse the sigle quote for the querString that you added.\n```js\n    module: {\n        loaders: [{\n            test: /\\.ajs$/,\n            loader: "node-async-require-loader?queryString=\'en\'"\n        }]\n    }\n```\n\n###### Step 3. Done\nThen the webpack will fetch the remote contents and build the codes for you!\nYou can see `examples/example03` in codes for more detials.\n\n### Usage with Pre Parser\n\nIn some cases, the remote contents you fetch may `not be a pure node moudle`. You need a parser to do some stuffs before webpack compiles it. So you can set up a preParser for the remote contents.\n\n`webpack.config.js`\n```js\nmodule.exports = {\n...\n    NodeAsycRequirePreParser: {\n        anyNameYouWant: function(remoteRawContent) {\n            // replace by your own contents\n            remoteRawContent = "module.exports=function(){ console.log(\'Replaceed by custom preParser!\');}";\n            return remoteRawContent;\n        }\n    }\n}\n```\n\n\n### Example with Pre Parser\n\n###### Step 1. Provide an .ajs file\n\n`.ajs` extenion is only for the loader to recognize the file. \nWrite down the remote url that provides contents(node moudle) you want to fetch.\n \n`remote-content.ajs`\n```js\nhttps://jaydenlin.github.io/fake-remote-contents-for-test/contents/pure-js/\n``` \n\n###### Step 2. Write down your own the preParser in webpack.config.js\n\nThe fetched contents will be passed to the preParser you write (in this example, it will be `anyNameYouWant`) before webpack compile it.\n\n`webpack.config.js`\n```js\nmodule.exports = {\n...\n    NodeAsycRequirePreParser: {\n        anyNameYouWant: function(remoteRawContent) {\n            // replace by your own contents\n            remoteRawContent = "module.exports=function(){ console.log(\'Replaceed by custom preParser!\');}";\n            return remoteRawContent;\n        }\n    }\n}\n```\n\nAfter the fetched contents are parsed by PreParser. The new contents will be\n\n```js\nmodule.exports=function(){ console.log(\'Replaceed by custom preParser!\');}\n```\nIt\'s a new node moudle.\n\n###### Step 3. Set up the preParser in webpack.config.js\nUse the sigle quote for the querString that you added.\n```js\n    module: {\n        loaders: [{\n            test: /\\.ajs$/,\n            loader: "node-async-require-loader?preParser=anyNameYouWant"\n        }]\n    }\n```\n\n###### Step 3. Done\nThen the webpack will fetch the remote contents and build the codes for you!\nYou can see `examples/example05` in codes for more detials.\n\n\n\n### Usage with Pre Parser (React templates)\nWe provide a preparser for pasing react-templates contents.\nYou can use it by setting the `preParser=rt`.\n\n```js\n    module: {\n        loaders: [{\n            test: /\\.ajs$/,\n            loader: "node-async-require-loader?preParser=rt"\n        }]\n    }\n```\n\n### Example with Pre Parser (React templates)\n\n###### Step 1. Provide an .ajs file\n\n`.ajs` extenion is only for the loader to recognize the file. \nWrite down the remote url that provides contents(node moudle) you want to fetch.\n \n`remote-content-using-react-templates.ajs`\n```js\nhttp://jaydenlin.github.io/fake-remote-contents-for-test/contents/react-template/\n``` \nthe contnets from the remote url are: \n\n```html\n<div>\n  <h3>Hello World Form Web</h3>\n</div>\n```\nIt is a react-template.\n\n###### Step 2. Set up the preParser in webpack.config.js\nUse the sigle quote for the querString that you added.   \nTo use React Teamplates parser, set the `preParser=rt`.   \n```js\n    module: {\n        loaders: [{\n            test: /\\.ajs$/,\n            loader: "node-async-require-loader?preParser=rt"\n        }]\n    }\n```\nThe react-template preParser will parse the contents to pure node moudle before webpack compiles.\n\n###### Step 3. Done\nThen the webpack will fetch the remote contents and build the codes for you!\nYou can see `examples/example02` in codes for more detials.\n\n### Test\n\nUse the command to run the mocha test. \n \n```\nnpm test\n```\n \nThe test tagets are in the `examples/` folder. \n\n',
17 silly publish   readmeFilename: 'README.md',
17 silly publish   gitHead: '473d5a5b7cdd18941f27045b95ca5ea85782bf5c',
17 silly publish   _id: 'node-async-require-loader@1.1.6',
17 silly publish   _shasum: '2edd199bc7966fe82d0fb5d567f2fb5e92ff2e97',
17 silly publish   _from: '.' }
18 silly mapToRegistry name node-async-require-loader
19 silly mapToRegistry using default registry
20 silly mapToRegistry registry https://registry.npmjs.org/
21 silly mapToRegistry uri https://registry.npmjs.org/node-async-require-loader
22 verbose publish registryBase https://registry.npmjs.org/
23 silly publish uploading /Users/weiyu.lin/.npm/node-async-require-loader/1.1.6/package.tgz
24 verbose request uri https://registry.npmjs.org/node-async-require-loader
25 verbose request sending authorization for write operation
26 info attempt registry request try #1 at 17:23:55
27 verbose request using bearer token for auth
28 verbose request id b082012ebb9f7306
29 http request PUT https://registry.npmjs.org/node-async-require-loader
30 http 403 https://registry.npmjs.org/node-async-require-loader
31 verbose headers { 'content-type': 'application/json',
31 verbose headers   'cache-control': 'max-age=300',
31 verbose headers   'content-length': '95',
31 verbose headers   'accept-ranges': 'bytes',
31 verbose headers   date: 'Sat, 26 Dec 2015 09:23:56 GMT',
31 verbose headers   via: '1.1 varnish',
31 verbose headers   connection: 'keep-alive',
31 verbose headers   'x-served-by': 'cache-hkg6826-HKG',
31 verbose headers   'x-cache': 'MISS',
31 verbose headers   'x-cache-hits': '0',
31 verbose headers   'x-timer': 'S1451121835.706231,VS0,VE1253' }
32 verbose request invalidating /Users/weiyu.lin/.npm/registry.npmjs.org/node-async-require-loader on PUT
33 error publish Failed PUT 403
34 verbose stack Error: "You cannot publish over the previously published version 1.1.6." : node-async-require-loader
34 verbose stack     at CachingRegistryClient.<anonymous> (/Users/weiyu.lin/.nvm/versions/node/v0.12.0/lib/node_modules/npm/node_modules/npm-registry-client/lib/request.js:254:14)
34 verbose stack     at Request._callback (/Users/weiyu.lin/.nvm/versions/node/v0.12.0/lib/node_modules/npm/node_modules/npm-registry-client/lib/request.js:178:14)
34 verbose stack     at Request.self.callback (/Users/weiyu.lin/.nvm/versions/node/v0.12.0/lib/node_modules/npm/node_modules/request/request.js:344:22)
34 verbose stack     at Request.emit (events.js:110:17)
34 verbose stack     at Request.<anonymous> (/Users/weiyu.lin/.nvm/versions/node/v0.12.0/lib/node_modules/npm/node_modules/request/request.js:1239:14)
34 verbose stack     at Request.emit (events.js:129:20)
34 verbose stack     at IncomingMessage.<anonymous> (/Users/weiyu.lin/.nvm/versions/node/v0.12.0/lib/node_modules/npm/node_modules/request/request.js:1187:12)
34 verbose stack     at IncomingMessage.emit (events.js:129:20)
34 verbose stack     at _stream_readable.js:908:16
34 verbose stack     at process._tickCallback (node.js:355:11)
35 verbose statusCode 403
36 verbose pkgid node-async-require-loader
37 verbose cwd /Users/weiyu.lin/FrontEnd/node-async-require-loader
38 error Darwin 15.2.0
39 error argv "/Users/weiyu.lin/.nvm/versions/node/v0.12.0/bin/node" "/Users/weiyu.lin/.nvm/versions/node/v0.12.0/bin/npm" "publish"
40 error node v0.12.0
41 error npm  v2.5.1
42 error code E403
43 error "You cannot publish over the previously published version 1.1.6." : node-async-require-loader
44 error If you need help, you may report this error at:
44 error     <http://github.com/npm/npm/issues>
45 verbose exit [ 1, true ]
